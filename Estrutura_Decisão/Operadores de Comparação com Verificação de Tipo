# Aula: Operadores de Compara√ß√£o com Verifica√ß√£o de Tipo (`===` e `!==`)

---

## 1Ô∏è‚É£ Diferen√ßa entre `==` e `===`

- **`==` (igualdade solta)** ‚Üí Compara apenas o valor, convertendo tipos automaticamente.
- **`===` (igualdade restrita)** ‚Üí Compara valor **e** tipo de dado, sem convers√µes.

üìå **Exemplo pr√°tico:**

```jsx
5 == "5"   // true  ‚Üí Apenas o valor √© igual, o tipo √© convertido automaticamente
5 === "5"  // false ‚Üí Valor igual, mas tipos diferentes (number vs string)

```

---

## 2Ô∏è‚É£ Por que usar `===`?

Usar `===` evita **comportamentos inesperados** causados pela convers√£o impl√≠cita do JavaScript.

üí° **Exemplo problem√°tico com `==`:**

```jsx
0 == false   // true  ‚Üí Convers√£o autom√°tica para boolean
"" == false  // true  ‚Üí String vazia tamb√©m vira false

```

‚úÖ **Solu√ß√£o com `===`:**

```jsx
0 === false   // false ‚Üí Tipos diferentes
"" === false  // false ‚Üí Tipos diferentes

```

---

## 3Ô∏è‚É£ Sintaxe e uso

```jsx
if (variavel === valor) {
  // Executa se valor e tipo forem iguais
}

if (variavel !== valor) {
  // Executa se valor ou tipo forem diferentes
}

```

---

## 4Ô∏è‚É£ Exemplos pr√°ticos
let numero = 5;

// Compara√ß√£o apenas de valor
if (numero == "5") {
  console.log("Valor igual, tipo diferente (com ==)");
}

// Compara√ß√£o de valor e tipo
if (numero === "5") {
  console.log("Valor e tipo iguais");
} else {
  console.log("Valor igual, mas tipo diferente (com ===)");
}

// Diferente restrito
if (numero !== "5") {
  console.log("Valor ou tipo diferentes (com !==)");
}
