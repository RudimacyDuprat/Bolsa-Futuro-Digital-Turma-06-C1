# üî¢ M√©todos e Propriedades de N√∫meros no JavaScript

## üì¢ Introdu√ß√£o

No JavaScript, n√∫meros podem ser manipulados usando **m√©todos** e **propriedades** do objeto **`Number`**.

Essas ferramentas permitem:

- Arredondar valores
- Limitar casas decimais
- Validar se algo √© ou n√£o um n√∫mero
- Trabalhar com valores m√°ximos e m√≠nimos suportados

---

## üìå O que √© um m√©todo?

- Um **m√©todo** √© uma **fun√ß√£o associada a um objeto**.
- No caso de n√∫meros, m√©todos realizam **opera√ß√µes espec√≠ficas** sobre o valor.

üìå Exemplo:

```jsx
let valor = 99.5678;
console.log(valor.toFixed(2)); // "99.57"

```

---

## üìå Principais m√©todos do objeto `Number`

### 1Ô∏è‚É£ `toFixed()`

- **Fun√ß√£o** que formata o n√∫mero com uma quantidade fixa de casas decimais.
- Retorna uma **string**.

```jsx
let numero = 23.999;
console.log(numero.toFixed(1)); // "24.0"
console.log(numero.toFixed(3)); // "23.999"

```

---

### 2Ô∏è‚É£ `isNaN()`

- Verifica se o valor **n√£o √© um n√∫mero** (*Not a Number*).
- Retorna `true` se **n√£o for um n√∫mero**, e `false` se for.

```jsx
console.log(isNaN("abc")); // true
console.log(isNaN(123));   // false

```

---

### 3Ô∏è‚É£ `Number()` (convers√£o)

- Converte um valor para n√∫mero, se poss√≠vel.
- √ötil para garantir que c√°lculos n√£o quebrem.

```jsx
console.log(Number("123"));   // 123
console.log(Number("12.5"));  // 12.5
console.log(Number("abc"));   // NaN

```

---

## üìå Propriedades importantes do `Number`

### `Number.MAX_VALUE`

- Retorna o **maior valor num√©rico poss√≠vel** que o JavaScript pode representar.

```jsx
console.log(Number.MAX_VALUE);
// 1.7976931348623157e+308

```

### `Number.MIN_VALUE`

- Retorna o **menor valor positivo** poss√≠vel.

```jsx
console.log(Number.MIN_VALUE);
// 5e-324

```

---

## ‚ö†Ô∏è Observa√ß√µes

- Trabalhar com n√∫meros muito grandes pode causar **perda de precis√£o**.
- Ao validar se algo √© n√∫mero, prefira **convers√µes seguras** antes de usar em c√°lculos.
- M√©todos como `toFixed()` retornam **string**, ent√£o se precisar usar novamente como n√∫mero, converta de volta.

---

## üß† Resumo

- O objeto `Number` fornece m√©todos e propriedades para manipula√ß√£o e valida√ß√£o num√©rica.
- **Principais m√©todos**: `toFixed()`, `isNaN()`, `Number()`.
- **Propriedades √∫teis**: `MAX_VALUE` e `MIN_VALUE`.
- Conhecer esses recursos ajuda a criar c√≥digos mais seguros e precisos.
