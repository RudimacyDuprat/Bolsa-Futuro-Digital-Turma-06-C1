# Métodos e Propriedades de Strings no JavaScript

## 📢 Introdução

Strings são um dos tipos de dados mais usados no JavaScript.

Elas possuem **propriedades** e **métodos** que permitem **analisar, modificar e manipular texto** de várias formas.

---

## 📌 Propriedade `length`

- Retorna o **número de caracteres** que uma string possui (incluindo espaços).

### Exemplo:

```jsx
let nome = "Matheus";
console.log(nome.length); // 7

```

---

## 📌 Acessando caracteres pelo índice

- Cada caractere de uma string tem um **índice** (posição), começando do **0**.

### Exemplo:

```jsx
let nome = "Matheus";
console.log(nome[0]); // "M"
console.log(nome[2]); // "t"

```

---

## 📌 Método `indexOf()`

- Retorna o **índice da primeira ocorrência** de um trecho de texto.
- Se não encontrar, retorna **1**.

### Exemplo:

```jsx
let frase = "O rato roeu a roupa do rei de Roma";
console.log(frase.indexOf("roeu")); // 6

```

---

## 📌 Método `slice()`

- Extrai uma parte da string, sem modificar a original.
- Aceita dois parâmetros: **início** (inclusivo) e **fim** (exclusivo).

### Exemplo:

```jsx
let frase = "O rato roeu a roupa do rei de Roma";
let parte = frase.slice(6, 10);
console.log(parte); // "roeu"

```

---

## 📌 Método `replace()`

- Substitui um trecho da string por outro.

### Exemplo:

```jsx
let frase = "O rato roeu a roupa do rei de Roma";
let novaFrase = frase.replace("roeu", "teste");
console.log(novaFrase); // "O rato teste a roupa do rei de Roma"

```

---

## ⚠️ Observações importantes

- Strings são **imutáveis** → métodos como `replace()` e `slice()` retornam uma nova string, sem alterar a original.
- Para localizar texto ignorando maiúsculas/minúsculas, use **expressões regulares** ou converta a string com `toLowerCase()` ou `toUpperCase()` antes de buscar.

---

## 🧠 Resumo

- `.length` → quantidade de caracteres.
- `[índice]` → acessa um caractere específico.
- `.indexOf()` → encontra a posição de um trecho.
- `.slice()` → extrai parte do texto.
- `.replace()` → substitui um trecho por outro.
