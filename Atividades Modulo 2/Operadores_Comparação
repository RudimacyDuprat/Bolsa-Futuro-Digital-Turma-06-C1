# **Aula: Operadores de Compara√ß√£o no JavaScript**

---

## 1Ô∏è‚É£ O que s√£o operadores de compara√ß√£o?

S√£o s√≠mbolos usados para **comparar dois valores** e retornar **`true` (verdadeiro)** ou **`false` (falso)**.

Por exemplo:

```jsx
console.log(5 > 3); // true
console.log(5 < 3); // false

```

---

## 2Ô∏è‚É£ Exemplo pr√°tico: Carteira de habilita√ß√£o

### üìú Regra

No Brasil, para tirar a **carteira de motorista**:

- Idade **maior ou igual a 18** anos.

### üíª Exemplo:

```jsx
let idade = 18;

if (idade >= 18) {
  console.log("Pode tirar a carteira de habilita√ß√£o.");
} else {
  console.log("N√£o pode tirar a carteira.");
}

```

üîç Aqui usamos o **maior ou igual (`>=`)**, pois **18 j√° √© suficiente**.

---

## 3Ô∏è‚É£ Diferen√ßa entre `==` e `===`

- **`==`** ‚Üí Compara apenas o **valor** (convers√£o autom√°tica de tipo).
- **`===`** ‚Üí Compara **valor e tipo** (mais seguro).

```jsx
console.log(5 == "5");  // true  (mesmo valor, tipo diferente)
console.log(5 === "5"); // false (valor igual, mas tipo diferente)

```

üí° Sempre prefira **`===`** para evitar resultados inesperados.

---

## 4Ô∏è‚É£ Diferen√ßa (`!=` e `!==`)

- **`!=`** ‚Üí Compara se os valores s√£o diferentes (ignora o tipo).
- **`!==`** ‚Üí Compara valor e tipo, retornando `true` se forem diferentes.

```jsx
console.log(5 != "5");   // false (mesmo valor)
console.log(5 !== "5");  // true  (valor igual, tipo diferente)

```

---

## 5Ô∏è‚É£ Comparando strings

O JavaScript tamb√©m compara **strings**:

```jsx
let nome = "Matheus";

if (nome === "Matheus") {
  console.log("O nome √© Matheus");
} else {
  console.log("Nome diferente");
}

```

‚ö†Ô∏è **Aten√ß√£o**: N√£o confunda **atribui√ß√£o (`=`)** com **compara√ß√£o (`==` ou `===`)**.

- `=` ‚Üí Atribui um valor.
- `==` e `===` ‚Üí Comparam valores.

---

- Else if e else
    
    ---
    
    # üìå Aula: Estruturas Condicionais ‚Äì `if`, `else if` e `else`
    
    ---
    
    ## 1Ô∏è‚É£ Estrutura b√°sica do `if`
    
    A sintaxe do `if` √©:
    
    ```jsx
    if (condicao) {
      // C√≥digo executado se a condi√ß√£o for verdadeira
    }
    
    ```
    
    üìå **Exemplo:**
    
    ```jsx
    let idade = 19;
    
    if (idade >= 18) {
      console.log("Pode entrar na festa.");
    }
    
    ```
    
    ---
    
    ## 2Ô∏è‚É£ Adicionando o `else`
    
    O `else` √© executado **somente se** a condi√ß√£o do `if` for **falsa**.
    
    ```jsx
    let idade = 16;
    
    if (idade >= 18) {
      console.log("Pode entrar na festa.");
    } else {
      console.log("N√£o pode entrar.");
    }
    
    ```
    
    ---
    
    ## 3Ô∏è‚É£ Usando `else if` para m√∫ltiplas condi√ß√µes
    
    Quando precisamos verificar **mais de uma condi√ß√£o**, usamos `else if`:
    
    ```jsx
    let idade = 17;
    
    if (idade >= 18) {
      console.log("Pode entrar na festa.");
    } else if (idade >= 16) {
      console.log("Pode entrar com autoriza√ß√£o dos pais.");
    } else {
      console.log("N√£o pode entrar.");
    }
    
    ```
    
    ---
    
    ## 4Ô∏è‚É£ Comparando valores com `!=` (diferente)
    
    O operador `!=` verifica se **dois valores s√£o diferentes**.
    
    ```jsx
    let nome = "Matheus";
    
    if (nome != "Pedro") {
      console.log("O nome n√£o √© Pedro.");
    }
    
    ```
    
    ---
    
    ## 5Ô∏è‚É£ `else` √© opcional
    
    O bloco `else` **n√£o √© obrigat√≥rio**.
    
    Podemos ter apenas um `if` ou `if` + `else if` sem precisar de `else` no final.
    
    üìå **Exemplo sem `else`:**
    
    ```jsx
    let idade = 20;
    
    if (idade >= 18) {
      console.log("Pode dirigir.");
    }
    
    ```
    
    ---
    
    ## 6Ô∏è‚É£ Exemplo completo
    
    ```jsx
    let nome = "Matheus";
    let idade = 19;
    
    if (nome === "Pedro") {
      console.log("Bem-vindo, Pedro!");
    } else if (nome === "Matheus") {
      console.log("Bem-vindo, Matheus!");
    } else {
      console.log("Usu√°rio desconhecido.");
    }
    
    if (idade >= 18) {
      console.log("Pode tirar a carteira de habilita√ß√£o.");
    } else {
      console.log("Ainda n√£o pode tirar a carteira.");
    }
    
    ```
    
    ---
    
- Operadores de Compara√ß√£o com Verifica√ß√£o de Tipo
    
    ---
    
    # üìå Aula: Operadores de Compara√ß√£o com Verifica√ß√£o de Tipo (`===` e `!==`)
    
    ---
    
    ## 1Ô∏è‚É£ Diferen√ßa entre `==` e `===`
    
    - **`==` (igualdade solta)** ‚Üí Compara apenas o valor, convertendo tipos automaticamente.
    - **`===` (igualdade restrita)** ‚Üí Compara valor **e** tipo de dado, sem convers√µes.
    
    üìå **Exemplo pr√°tico:**
    
    ```jsx
    5 == "5"   // true  ‚Üí Apenas o valor √© igual, o tipo √© convertido automaticamente
    5 === "5"  // false ‚Üí Valor igual, mas tipos diferentes (number vs string)
    
    ```
    
    ---
    
    ## 2Ô∏è‚É£ Por que usar `===`?
    
    Usar `===` evita **comportamentos inesperados** causados pela convers√£o impl√≠cita do JavaScript.
    
    üí° **Exemplo problem√°tico com `==`:**
    
    ```jsx
    0 == false   // true  ‚Üí Convers√£o autom√°tica para boolean
    "" == false  // true  ‚Üí String vazia tamb√©m vira false
    
    ```
    
    ‚úÖ **Solu√ß√£o com `===`:**
    
    ```jsx
    0 === false   // false ‚Üí Tipos diferentes
    "" === false  // false ‚Üí Tipos diferentes
    
    ```
    
    ---
    
    ## 3Ô∏è‚É£ Sintaxe e uso
    
    ```jsx
    if (variavel === valor) {
      // Executa se valor e tipo forem iguais
    }
    
    if (variavel !== valor) {
      // Executa se valor ou tipo forem diferentes
    }
    
    ```
    
    ---
    
    ## 4Ô∏è‚É£ Exemplos pr√°ticos
let numero = 5;

// Compara√ß√£o apenas de valor
if (numero == "5") {
  console.log("Valor igual, tipo diferente (com ==)");
}

// Compara√ß√£o de valor e tipo
if (numero === "5") {
  console.log("Valor e tipo iguais");
} else {
  console.log("Valor igual, mas tipo diferente (com ===)");
}

// Diferente restrito
if (numero !== "5") {
  console.log("Valor ou tipo diferentes (com !==)");
}
